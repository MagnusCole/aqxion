// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  businessName  String?
  businessType  String?
  phone         String?
  website       String?
  whatsappNumber String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Portal specific fields
  planStartDate DateTime? // Inicio del plan de 90 días
  supportExpiresAt DateTime? // Fin del soporte incluido
  onboardingCompleted Boolean @default(false)
  isActive      Boolean   @default(true)

  accounts Account[]
  sessions Session[]
  chatMessages ChatMessage[]
  businessMetrics BusinessMetrics?
  resourceProgress ResourceProgress[]
  tasks         Task[]
  activities    Activity[]
  supportTickets SupportTicket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatMessage {
  id        String   @id @default(cuid())
  text      String
  sender    String   // 'user' | 'agent'
  userId    String
  timestamp DateTime @default(now())
  status    String?  // 'sending' | 'sent' | 'delivered'

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessMetrics {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Métricas alineadas con el servicio real
  websiteVisits         Int      @default(0)
  previousWebsiteVisits Int      @default(0)
  leads                 Int      @default(0)
  previousLeads         Int      @default(0)
  whatsappChats         Int      @default(0)
  previousWhatsappChats Int      @default(0)
  googleViews           Int      @default(0)
  previousGoogleViews   Int      @default(0)
  
  // Metadatos
  lastUpdated          DateTime @updatedAt
  dataSource           String?  // 'google_analytics' | 'whatsapp_api' | 'manual'

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResourceProgress {
  id           String   @id @default(cuid())
  userId       String
  resourceId   String
  resourceType String   // 'pdf' | 'video' | 'template' | 'tool'
  completed    Boolean  @default(false)
  downloadedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
}

// Nuevos modelos para funcionalidad real

model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  priority    String   // 'high' | 'medium' | 'low'
  status      String   @default("pending") // 'pending' | 'completed' | 'cancelled'
  category    String?
  dueDate     DateTime?
  estimatedTime String? // "30 min", "1 hora", etc.
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  category    String?  // 'Sitio Web' | 'WhatsApp' | 'Google' | 'Sistema'
  status      String   // 'completed' | 'in-progress' | 'pending' | 'waiting'
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  category    String   // 'website' | 'whatsapp' | 'google' | 'metrics' | 'strategy' | 'technical' | 'other'
  priority    String   @default("normal") // 'normal' | 'urgent'
  status      String   @default("open") // 'open' | 'in_progress' | 'resolved' | 'closed'
  
  // Respuesta del equipo
  response    String?
  respondedAt DateTime?
  respondedBy String?  // Staff member name
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Tabla para los pasos del onboarding
model OnboardingStep {
  id          String   @id @default(cuid())
  userId      String
  stepOrder   Int
  title       String
  description String?
  status      String   @default("upcoming") // 'completed' | 'current' | 'upcoming'
  completedAt DateTime?
  estimatedDays Int    @default(0)

  @@unique([userId, stepOrder])
}
